package io.userhabit.commonimport reactor.util.Loggers/** * @author sbnoh * * 메뉴별 최대 55개 까지 줄 수 있음 * 권한에 대한 상위 개념은 없음 * ex) delete, write 권한이 있다고 read 를 할 수는 없음, delete, write, read 권한 각각 가지고 있어야 함. * ex) manager도 member 권한이 있는 것이 아니고 manager, member 각각 가지고 있어야 함. * */object Level {	private val log = Loggers.getLogger(this.javaClass)	/** 0b1L         , 1   */ const val READ          = 0b1L	/** 0b10L        , 2   */ const val WRITE         = 0b10L	/** 0b100L       , 4   */ const val UPDATE        = 0b100L	/** 0b1_000L     , 8   */ const val DELETE        = 0b1_000L	/** 0b10_000L    , 16  */ const val MEMBER        = 0b10_000L	/** 0b100_000L   , 32  */ const val MANAGER       = 0b100_000L	/** 0b1_000_000L , 64  */ const val ADMINISTRATOR = 0b1_000_000L	/** 0b10_000_000L, 128 */ const val SYSTEM        = 0b10_000_000L	const val menu01 = 256L	const val menu02 = 512L	const val menu03 = 1024L	const val menu04 = 2048L	const val menu05 = 4096L	const val menu06 = 8192L	const val menu07 = 16384L	const val menu08 = 32768L	const val menu09 = 65536L	const val menu10 = 131072L	const val menu11 = 262144L	const val menu12 = 524288L	const val menu13 = 1048576L	const val menu14 = 2097152L	const val menu15 = 4194304L	const val menu16 = 8388608L	const val menu17 = 16777216L	const val menu18 = 33554432L	const val menu19 = 67108864L	const val menu20 = 134217728L	const val menu21 = 268435456L	const val menu22 = 536870912L	const val menu23 = 1073741824L	const val menu24 = 2147483648L	const val menu25 = 4294967296L	const val menu26 = 8589934592L	const val menu27 = 17179869184L	const val menu28 = 34359738368L	const val menu29 = 68719476736L	const val menu30 = 137438953472L	const val menu31 = 274877906944L	const val menu32 = 549755813888L	const val menu33 = 1099511627776L	const val menu34 = 2199023255552L	const val menu35 = 4398046511104L	const val menu36 = 8796093022208L	const val menu37 = 17592186044416L	const val menu38 = 35184372088832L	const val menu39 = 70368744177664L	const val menu40 = 140737488355328L	const val menu41 = 281474976710656L	const val menu42 = 562949953421312L	const val menu43 = 1125899906842624L	const val menu44 = 2251799813685248L	const val menu45 = 4503599627370496L	const val menu46 = 9007199254740992L	const val menu47 = 18014398509481984L	const val menu48 = 36028797018963968L	const val menu49 = 72057594037927936L	const val menu50 = 144115188075855872L	const val menu51 = 288230376151711744L	const val menu52 = 576460752303423488L	const val menu53 = 1152921504606846976L	const val menu54 = 2305843009213693952L	const val menu55 = 4611686018427387904L	fun createLevel(vararg levels: Long): Long {		return levels.reduce { acc, l -> acc.or(l) }	}	fun hasPermission(memberLevel: Long, level: Long): Boolean {		return memberLevel.and(level) > 0L	}	/**	 * memberLevel이 levels에 모두 포함되면 true, 아니면 false	 */	fun hasPermission(memberLevel: Long, vararg levels: Long): Boolean {		return levels.find { memberLevel.and(it) == 0L } == null	}	/**	 * adminLevel이 MEMBER 권한이 있으면 false.	 * adminLevel 이 targetLevel 보다 같거나 상위이고, WRITE, MODIFY 권한이 있다면 true	 */	fun hasSetPermission(adminLevel: Long, targetLevel: Long): Boolean {		return hasPermission(adminLevel, WRITE, UPDATE) && (			hasPermission(adminLevel, SYSTEM) ||				(hasPermission(adminLevel, ADMINISTRATOR) && !hasPermission(targetLevel, SYSTEM)) ||				(hasPermission(adminLevel, MANAGER) && !contains(targetLevel, SYSTEM, ADMINISTRATOR))			)	}	/**	 * adminLevel이 MEMBER 권한이 있으면 false.	 * adminLevel 이 targetLevel 보다 같거나 상위이고, DELETE 권한이 있다면 true	 */	fun hasDeletePermission(adminLevel: Long, targetLevel: Long): Boolean {		return hasPermission(adminLevel, DELETE) && (			hasPermission(adminLevel, SYSTEM) ||				(hasPermission(adminLevel, ADMINISTRATOR) && !hasPermission(targetLevel, SYSTEM)) ||				(hasPermission(adminLevel, MANAGER) && !contains(targetLevel, SYSTEM, ADMINISTRATOR))			)	}	/**	 * level 이 levels 값중에 하나라도 포함되어 있으면 true 아니면 false	 */	fun contains(level: Long, vararg levels: Long): Boolean {		return levels.find { hasPermission(level, it) } != null	}}